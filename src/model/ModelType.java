package model;import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.Map;import java.util.Random;import org.apache.log4j.Logger;import rmi.dataSource.Campus;import manger.WeibotOpenApiManger;import weibo4j.model.User;import weibo4j.org.json.JSONObject;public abstract class ModelType {		protected static Logger ModelTypeLogger = Logger.getLogger(Campus.class);	protected JSONObject responsJson;	protected String people;		public static ModelType getInstance(JSONObject jsonResponse,String people){		ModelType modelType = null;		if(people.equals("帅哥") || people.equals("美女")){			modelType = new BoyAndGirlModel(jsonResponse, people);		}else{			modelType = new NormalModel(jsonResponse, people);		}		return modelType;	}		/**	 * 抽象函数，每个查询类型拥有自己的getInfo();	 * @return 查询结果，字符串显示。	 */	public abstract String getInfo();		/**	 * 通过OpenApi平台获取用户User信息，其中提取了Gender和ScreenName信息	 * @param uid	 * @return Map<String,String> Gender ScreenName	 */	protected Map<String, String> getGenderAndScreenName(String uid) {		Map<String, String> retMap = null;		String gender = "";		User user = WeibotOpenApiManger.getUserInfo(uid);		int nVerifiedType = user.getverifiedType();		if(nVerifiedType>0 && nVerifiedType<=7){			return null;		}else{			retMap = new HashMap<String, String>();			if (user != null) {				gender = user.getGender();				retMap.put("Gender", gender);				StringBuffer screenNameBuffer = new StringBuffer();				screenNameBuffer.append("@");				screenNameBuffer.append(user.getScreenName());				screenNameBuffer.append(" ");				retMap.put("ScreenName", screenNameBuffer.toString());			}		}				return retMap;	}//end getGanderAndScreenName			/**	 * 获得不重复的随机数	 * @param nLen	随机数限定域	 * @param nlimit 随机数个数	 * @return ArrayList<Integer> 	 */	protected ArrayList<Integer> getRandomNum(int nLen,int nlimit) {		ArrayList<Integer> retList = new ArrayList<Integer>();		if (nLen <= 5) {			for (int i = 0; i < nLen; i++) {				retList.add(i);			}		} else {			Random random = new Random();			HashSet<Integer> numFilter = new HashSet<Integer>();			int idx = 0;			while (retList.size() < nlimit) {				idx = random.nextInt(nLen);				if (numFilter.add(idx)) {					retList.add(idx);				}			}		}		return retList;	}//end getRandomNum		/**	 * 上层传递的people参数转换为接口可读的type信息	 * @param people	 * @return	 */	protected String peopleToType(String people){		String type = "";		if (people.equals("官方蓝")) {			type = "1";		} else if (people.equals("红人")) {			type = "2";		} else if (people.equals("校友")) {			type = "3";		} else if (people.equals("帅哥")) {			type = "4";		} else if (people.equals("美女")) {			type = "4";		} else if (people.equals("通讯录")) {			type = "5";		} else {			type = "2";		}		return type;	}//end peopleToType	}